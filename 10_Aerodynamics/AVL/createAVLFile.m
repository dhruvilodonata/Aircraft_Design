% Creates an AVL file from given Geometry to use in AVL
% TO DO:
function createAVLFile(aircraftdata,inputdata,wingIncidenceAngle,identifier,airspeed)
%% Extract Data
% Wing:
S_ref = aircraftdata.Geometry.wing.projected_surface;
chord_wing_mean = aircraftdata.Geometry.wing.mean_aerodynamic_chord;
b_wing = aircraftdata.Geometry.wing.span;
taper_wing = aircraftdata.Geometry.wing.taper_ratio;
if ~isnan(aircraftdata.Geometry.wing.dihedral)
    dihedral_wing_deg = aircraftdata.Geometry.wing.dihedral;
    dihedral_position = aircraftdata.Geometry.wing.dihedral_position;
else
    dihedral_wing_deg = 0;
    dihedral_position = 0.5;
end
% Tail:
tail_position = aircraftdata.Geometry.tail.x_position;
taper_tail = aircraftdata.Geometry.tail.taper_ratio;
b_tail = aircraftdata.Geometry.tail.span;
chord_tail = aircraftdata.Geometry.tail.mean_aerodynamic_chord;
tail_angle_deg = aircraftdata.Geometry.tail.dihedral;
airfoil_wing = aircraftdata.Geometry.wing.airfoil;
airfoil_tail = aircraftdata.Geometry.tail.airfoil;

%% Airfoil Path and File Name
currentPath = pwd;
airfoilPath = fullfile(currentPath, '80_Databases','airfoil_geometry');
airfoil_wing_path = fullfile(airfoilPath,[airfoil_wing,'.dat']);
airfoil_tail_path = fullfile(airfoilPath,[airfoil_tail,'.dat']);

%% Precalculations
chord_wing_root = 2 * chord_wing_mean / (taper_wing + 1);
chord_wing_middle = 2 * S_ref / (1 + taper_wing) / b_wing * (1 - (1 - taper_wing)/b_wing*2*dihedral_position*b_wing/2);
chord_wing_tip = chord_wing_root * taper_wing;
wing_middle_x = (chord_wing_root - chord_wing_tip) * 0.25 * dihedral_position;
wing_middle_y = b_wing / 2 * dihedral_position;
wing_middle_z = 0;
wing_tip_x = (chord_wing_root - chord_wing_tip) * 0.25;
wing_tip_y = b_wing / 2;
wing_tip_z = sind(dihedral_wing_deg) * b_wing / 2 * (1 - dihedral_position);

chord_tail_root = 2 * chord_tail / (taper_tail + 1);
chord_tail_tip = chord_tail_root * taper_tail;
tail_x = tail_position - chord_tail * 0.25;
tail_tip_x = (chord_tail_root - chord_tail_tip) * 0.25;
tail_tip_y = cosd(tail_angle_deg) * b_tail / 2;
tail_tip_z = sind(tail_angle_deg) * b_tail / 2;

[C_l_alpha_wing, C_l_alpha_tail] = liftCurveSlopeCalculation(aircraftdata,inputdata,airspeed);
CLaf_wing = C_l_alpha_wing / (2*pi);
CLaf_tail = C_l_alpha_tail / (2*pi);

position_cg = aircraftdata.Mass.real_position_CG;
if isnan(position_cg)
    position_cg = 0.1;
end

if dihedral_position == 0
    wingMiddleSection = '';
elseif dihedral_position > 0 && dihedral_position < 1
    wingMiddleSection = {...
        ... Wing Middle Section
        'SECTION',...
        ... x y z chord angle
        [num2str(wing_middle_x),' ', num2str(wing_middle_y),' ',num2str(wing_middle_z),' ', num2str(chord_wing_middle), ' 0'],...
        'AFILE',...
        ['"',airfoil_wing_path,'"'],...
        'CONTROL',...
        ...name          Gain, Xhinge, XYZhvec, SgnDup
        'controlSurface  1     0       0. 1. 0.  1'...
        ...
        };
    wingMiddleSection = strjoin(wingMiddleSection,'\n');
else
    error('Unvalid Dihedral Position! Has to be >=0 and < 1')
end

%% AVL File Generation
index = 1;
while true
    avlfile = fopen(fullfile('10_Aerodynamics/avl',['ourOwnPlane',num2str(identifier),'.avl']),'w');
    if ~(avlfile < 0)
        break
    elseif index > 5
        error('Error999:FileID',['Could not open .avl file for combination ',identifier])
    end
    index = index + 1;
end
if ispc
    airfoil_wing_path = strrep(airfoil_wing_path,'\','\\');
    airfoil_tail_path = strrep(airfoil_tail_path,'\','\\');
end

fileinput = {...
... name of plane
'ourOwnPlane',...
... Mach number
'0.0',...
... Symmetry Settings (iYsym, iZsym, Zsym)
'1 0 0',...
... S_ref, chord_ref, span_ref
[num2str(S_ref), ' ', num2str(chord_wing_mean), ' ', num2str(b_wing)],...
... CG Position (x,y,z)
[num2str(position_cg),' 0 0'],...
... C_D_p
'0',...
'SURFACE',...
'Wing',...
... parameters for calculation (N_chord, S_chord, N_span, S_span)
'10 1.0 20 -1.1',...
'ANGLE',...
num2str(wingIncidenceAngle,'%.1f'),...
'SCALE',...
'1 1 1',...
'TRANSLATE',...
[num2str(-chord_wing_mean * 0.25),' 0 0'],...
...
... Wing Root Section
'SECTION',...
... x y z chord angle
['0 0 0 ', num2str(chord_wing_root), ' 0'],...
'AFILE',...
['"',airfoil_wing_path,'"'],...
'CLAF',...
num2str(CLaf_wing),...
'CONTROL',...
...name          Gain, Xhinge, XYZhvec, SgnDup
'controlSurface  1     0       0. 1. 0.  1',...
'CLAF',...
num2str(CLaf_wing),...
wingMiddleSection,...
... Wing Tip Section
'SECTION',...
... x y z chord angle
[num2str(wing_tip_x),' ', num2str(wing_tip_y),' ',num2str(wing_tip_z),' ', num2str(chord_wing_tip), ' 0'],...
'AFILE',...
['"',airfoil_wing_path,'"'],...
'CLAF',...
num2str(CLaf_wing),...
'CONTROL',...
...name          Gain, Xhinge, XYZhvec, SgnDup
'controlSurface  1     0       0. 1. 0.  1',...
'CLAF',...
num2str(CLaf_wing),...
...
'SURFACE',...
'Vtail',...
... parameters for calculation (N_chord, S_chord, N_span, S_span)
'7 1.0 10 -1.1',...
'ANGLE',...
'0',...
'SCALE',...
'1 1 1',...
'TRANSLATE',...
[num2str(tail_x),' 0 0'],...
...
... Tail Root Section
'SECTION',...
... x y z chord angle
['0 0 0 ', num2str(chord_tail_root), ' 0'],...
'AFILE',...
['"',airfoil_tail_path,'"'],...
'CLAF',...
num2str(CLaf_tail),...
...
... Tail Tip Section
'SECTION',...
... x y z chord angle
[num2str(tail_tip_x),' ', num2str(tail_tip_y),' ',num2str(tail_tip_z), ' ', num2str(chord_tail_tip), ' 0'],...
'AFILE',...
['"',airfoil_tail_path,'"'],...
'CLAF',...
num2str(CLaf_tail)...
};

fprintf(avlfile,strjoin(fileinput,'\n'));
index = 1;
while true
    status = fclose(avlfile);
    if status == 0
        break
    elseif index > 5
        error('Error999:FileID',['Could not close .avl file for combination ',identifier])
    end
    index = index + 1;
end
end